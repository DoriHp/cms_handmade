<% include _layouts/header %>
<!-- BEGIN PAGE LEVEL PLUGINS -->
<link href="/assets/global/plugins/bootstrap-fileinput/bootstrap-fileinput.css" rel="stylesheet" type="text/css" />
<link href="/assets/global/plugins/datatables/datatables.min.css" rel="stylesheet" type="text/css" />
<link href="/assets/global/plugins/datatables/plugins/bootstrap/datatables.bootstrap.css" rel="stylesheet" type="text/css" />
<link href="/assets/apps/css/inbox.min.css" rel="stylesheet" type="text/css" />
<!-- END PAGE LEVEL PLUGINS -->
<link rel="stylesheet" href="/slickGrid/slick.grid.css" type="text/css"/>
<link rel="stylesheet" href="/slickGrid/controls/slick.pager.css" type="text/css"/>
<link rel="stylesheet" href="/slickGrid/css/smoothness/jquery-ui-1.11.3.custom.css" type="text/css"/>
<link rel="stylesheet" href="/slickGrid/controls/slick.columnpicker.css" type="text/css"/>
<!-- <link rel="stylesheet" href="examples.css" type="text/css"/> -->
</head>
<body class="page-container-bg-solid page-header-fixed page-sidebar-closed-hide-logo" onbeforeunload="destroyAutoResize()">
    <% include _layouts/top_menu %>
    <!-- BEGIN HEADER & CONTENT DIVIDER -->
    <div class="clearfix"> </div>
    <!-- END HEADER & CONTENT DIVIDER -->
    <!-- BEGIN CONTAINER -->
    <div class="page-container">
        <% include _layouts/sidebar %>
        <!-- BEGIN CONTENT -->
            <div class="page-content-wrapper">
                <!-- BEGIN CONTENT BODY -->
                <div class="page-content">
                    <!-- BEGIN PAGE HEAD-->
                    <div class="page-head">
                        <!-- BEGIN PAGE TITLE -->
                        <div class="page-title">
                            <h1>Danh sách điểm bán
                            </h1>
                        </div>
                        <!-- END PAGE TITLE -->
                    </div>
                    <!-- END PAGE HEAD-->
                    <% include _layouts/breadcrumb %>
                    <!-- BEGIN PAGE BASE CONTENT -->
                   
                    <div class="row">
                        <div class="col-md-12">
                            <!-- BEGIN SAMPLE TABLE PORTLET-->
                            <div class="portlet box red">
                                <div class="portlet-title">
                                    <div class="caption">
                                        <i class="far fa-list-alt"></i>Điểm bán</div>
                                    <div class="tools" style="margin-left: 10px;" style="align-content: right">
                                        <a class="collapse"> </a>
                                    </div>
<!--                                     <div class="actions" style="align-content: left">
                                        <button type="button" class="btn btn-default btn-sm">
                                            <i class="far fa-check-circle"></i></i> Mark as important </button>
                                        <button type="button" class="btn btn-default btn-sm" onclick="open_chat()">
                                            <i class="far fa-edit"></i>  </button>
                                    </div> -->
                                </div>
                                <div class="portlet-body">
                                    <div style="width:100%;">
                                        <div class="grid-header" style="width:100%;">
                                            <div id="addingForm" class="col-md-6" style="padding: 0; display: none;">
                                                <label class="col-md-3 control-label" style="padding:0; height: 34px; line-height: 34px;">Mã thành viên</label>
                                                <div class="input-group col-md-7">
                                                    <input type="text" class="form-control" placeholder="Member code" id="input_mem_code" name="member_code">
                                                    <span class="input-group-addon">
                                                        <i class="fas fa-sync-alt" onclick="reset()" title="Reset input form"></i>
                                                    </span>
                                                </div>
                                                <button class="col-md-2 btn btn-secondary" type="button" onclick="addNew()" style="height: 34px;">Lưu lại</button>
                                            </div>
                                            <div class="btn-group" style="float:right;margin-bottom: 10px;">
                                                <button class="btn btn-info" onclick="toggleFilterRow()" style="margin-right: 5px; font-weight: bold;"><i class="fas fa-search"></i> Tìm kiếm </button>
                                                <% if (user.role == 'admin') { -%>
                                                    <button class="btn btn-danger" style="font-weight: bold;" onclick="toggleAddingForm()"><i class="fas fa-plus"></i> Thêm mới </button> 
                                                <% } -%>   
                                            </div>
                                        </div>
                                        <div id="myGrid" style="width:100%;height:400px; border: 1px solid #ccc"></div>
                                        <div id="pager" style="width:100%;height:20px;"></div>
                                    </div>
                                </div>
                                <div id="inlineFilterPanel" style="display:none;background:#dddddd;padding:3px;color:black; display: flex;">
                                    Nhập dữ liệu tìm kiếm &nbsp; 
                                    <div class="input-group" style="height: 30px;">
                                        <input type="text" class="form-control" id="txtSearch2" name="member_code" style="height: 30px;">
                                        <span class="input-group-addon" style="height: 30px;">
                                            <i class="fas fa-sync-alt" id="reset2" title="Reset input form"></i>
                                        </span>
                                    </div>
                                    &nbsp; Tìm kiếm theo &nbsp;
                                    <select id="set_search_field" onchange="change_field()">
                                        <option value="member_code">Mã điểm bán</option>
                                        <option value="fb_name" selected>Tên facebook</option>
                                    </select>
                                </div>
                            </div>
                            <!-- END SAMPLE TABLE PORTLET-->
                        </div>
                    </div>
                    <!-- END PAGE BASE CONTENT -->
                </div>
                <!-- END CONTENT BODY -->
            </div>
            <!-- END CONTENT -->
    </div>
    <!-- END CONTAINER -->
    <% include _layouts/global_plugin %>
    <% include _layouts/socket %>
    <!-- SELF ADDING SCRIPT -->
    <!-- <script src="/js/lib/jquery-1.11.2.min.js"></script> -->
    <script src="/slickGrid/lib/firebugx.js"></script>
    <script src="/slickGrid/lib/jquery-ui-1.11.3.min.js"></script>
    <script src="/slickGrid/lib/jquery.event.drag-2.3.0.js"></script>
    
    <script src="/slickGrid/slick.core.js"></script>
    <script src="/slickGrid/plugins/slick.autotooltips.js"></script>
    <script src="/slickGrid/plugins/slick.cellrangedecorator.js"></script>
    <script src="/slickGrid/plugins/slick.cellrangeselector.js"></script>
    <script src="/slickGrid/plugins/slick.cellcopymanager.js"></script>
    <script src="/slickGrid/plugins/slick.cellselectionmodel.js"></script>
    <script src="/slickGrid/slick.editors.js"></script>
    <script src="/slickGrid/slick.grid.js"></script>
    <script src="/slickGrid/plugins/slick.cellrangeselector.js"></script>
    <script src="/slickGrid/slick.formatters.js"></script>
    <script src="/slickGrid/plugins/slick.rowselectionmodel.js"></script>
    <script src="/slickGrid/slick.dataview.js"></script>
    <script src="/slickGrid/controls/slick.pager.js"></script>
    <script src="/slickGrid/controls/slick.columnpicker.js"></script> -->
    <% if (user.role == 'admin') { -%>
        <script>
        var searchField = "member_code"
        function change_field(e){
            var elem = (typeof this.selectedIndex === "undefined" ? window.event.srcElement : this)
            var value = elem.value || elem.options[elem.selectedIndex].value
            return searchField = value
        }

        function reset(){
            document.getElementById("input_mem_code").value = ""
        }

        function isIEPreVer9() { var v = navigator.appVersion.match(/MSIE ([\d.]+)/i); return (v ? v[1] < 9 : false); }
        var grid
        var dataView
        var checkboxSelector1
        var columns = []

        columns.push({id: "id", name: "STT", field: "id", maxWidth: 80, cssClass: "cell-title", sortable: true})
        columns.push({id: "member_code", name: "Mã điểm bán", field: "member_code", minWidth: 120, cssClass: "cell-title", sortable: true})
        columns.push({id: "otp", name: "OTP", field: "otp", minWidth: 60, cssClass: "cell-title"})
        columns.push({id: "fb_name", name: "Tên facebook", field: "fb_name", minWidth: 120, cssClass: "cell-title", sortable: true})
        columns.push({id: "fb_gender", name: "Giới tính", field: "fb_gender", minWidth: 60, cssClass: "cell-title"})
        columns.push({id: "fb_linkChat", name: "Đường dẫn messenger", field: "fb_linkChat", minWidth: 160, cssClass: "cell-title", formatter: linkFormatter})
        columns.push({id: "auto_reply_string", name: "Trả lời tự động", field: "auto_reply_string", minWidth: 100, cssClass: "cell-title"})
        columns.push({id: "del", field:'del', name:'Xóa', maxWidth: 190, formatter: buttonFormatter})

        function buttonFormatter(row,cell,value,columnDef,dataContext){  
            var button = "<button class='del' type='button' id='"+ dataContext.id +"'>Xóa</button>";
            //the id is so that you can identify the row when the particular button is clicked
            return button;
            //Now the row will display your button
        }

        function linkFormatter( row, cell, value, columnDef, dataContext ) {
            return '<a href="' + dataContext['fb_linkChat'] + '" target="_blank">' + value + '</a>';
        };

        var options = {
            columnPicker: {
                columnTitle: "Columns",
                hideForceFitButton: false,
                hideSyncResizeButton: false,
                forceFitTitle: "Force fit columns",
                syncResizeTitle: "Synchronous resize",
            },
            editable: false,
            enableAddRow: false,
            enableCellNavigation: true,
            enableTextSelectionOnCells: true,
            asyncEditorLoading: true,
            forceFitColumns: true,
            topPanelHeight: 25,
            autoEdit: false
        }

        var sortcol = "id"
        var sortdir = 1
        var percentCompleteThreshold = 0
        var searchString = ""

        function myFilter(item, args) {
            
            if (args.searchString != "" && item[`${searchField}`].indexOf(args.searchString) == -1) {
                return false;
            } 
        
            return true;
        }

        function comparer(a, b) {
            var x = a[sortcol], y = b[sortcol];
            return (x == y ? 0 : (x > y ? 1 : -1));
        }

        function toggleFilterRow() {
            grid.setTopPanelVisibility(!grid.getOptions().showTopPanel);
        }

        function toggleAddingForm(){
            var form = document.getElementById("addingForm")
            if(form.style.display == 'flex'){
                form.style.display = 'none'
            }else{
                form.style.display = 'flex'
            }
        }

        function addNew(){
            var data = document.getElementById("input_mem_code").value
            axios.post('/manager/member/add', {
                data: {member_code: data}
            })
            .then(function(response){
                if(response.status == 200){
                    swal({
                        title: "Thành công!",
                        text: "Thêm điểm bán mới thành công! Mã OTP là " + response.data,
                        type: "success",
                        timer: 10000
                    })
                    .then(function(result){
                        location.reload()
                    })
                }
            })
            .catch(function(error){
                console.error(error)
                swal("Lỗi!", error.response.data, "error", {confimrButtonColor: 'red'})
            })
        }


        $(".grid-header .ui-icon")
            .addClass("ui-state-default ui-corner-all")
            .mouseover(function (e) {
            $(e.target).addClass("ui-state-hover")
        })
            .mouseout(function (e) {
            $(e.target).removeClass("ui-state-hover")
        });

        axios.get('/manager/member/list')
        .then(function(response){
            var data = response.data
            for(let i = 0; i < data.length; i++ ){
                data[i].id = i + 1
                data[i].fb_id = data[i].fb_id
                data[i].fb_name = data[i].fb_lastName + " " + data[i].fb_firstName
                data[i].auto_reply_string = (data[i].auto_reply)?"Có":"Không"
            }
            dataView = new Slick.Data.DataView({ inlineFilters: true })
            grid = new Slick.Grid("#myGrid", dataView, columns, options)
            grid.setSelectionModel(new Slick.RowSelectionModel())

            var pager = new Slick.Controls.Pager(dataView, grid, $("#pager"));
            var columnpicker = new Slick.Controls.ColumnPicker(columns, grid, options);

            var row5 = document.getElementsByClassName("r5")
            for(let i of row5){
                var a = document.createElement("a")
                a.href = i.textContent
                a.innerHTML = "Link"
                i.append(a)
            }

            grid.onClick.subscribe( function (e, args) {
                // if the delete column (where field was assigned 'del' in the column definition)
                if (args.grid.getColumns()[args.cell].field == 'del') {
                    swal({
                        title: "Xác nhận",
                        text: "Bạn chắc chắn muốn xóa điểm bán này?", 
                        showCancelButton: true,
                        confirmButtonText: "Tiếp tục",
                        cancelButtonText: "Hủy bỏ",
                        confirmButtonColor: 'orange',
                        type: "warning",
                        allowOutsideClick: false
                    })
                    .then(function(result){
                        if(result.value){
                            axios.delete('/manager/member/delete/' + encodeURIComponent(args.grid.getDataItem(args.row).member_code))
                            .then(function(response){
                                if(response.status == 200){
                                    swal("Thành công!", "Xóa điểm bán thành công!", "success")
                                    dataView.deleteItem(args.grid.getDataItem(args.row).id)
                                    args.grid.invalidate()
                                }
                            })
                            .catch(function(error){
                                console.error(error)
                                swal("Lỗi!", error.response.data, "error", {confirmButtonColor: 'red'})
                            })
                        }
                    })
                }
            })

            // move the filter panel defined in a hidden div into grid top panel
            $("#inlineFilterPanel")
                .appendTo(grid.getTopPanel())
                .show()

            grid.onCellChange.subscribe(function (e, args) {
                dataView.updateItem(args.item.id, args.item)
            })

            grid.onKeyDown.subscribe(function (e) {
                // select all rows on ctrl-a
                if (e.which != 65 || !e.ctrlKey) {
                return false;
            }

            var rows = []
            for (var i = 0; i < dataView.getLength(); i++) {
              rows.push(i)
            }
            grid.setSelectedRows(rows);
                e.preventDefault()
            })

            grid.onSort.subscribe(function (e, args) {
            sortdir = args.sortAsc ? 1 : -1;
            sortcol = args.sortCol.field

            if (isIEPreVer9()) {
              // using temporary Object.prototype.toString override
              // more limited and does lexicographic sort only by default, but can be much faster

            var percentCompleteValueFn = function () {
                var val = this["percentComplete"];
                if (val < 10) {
                  return "00" + val;
                } else if (val < 100) {
                  return "0" + val;
                } else {
                  return val;
                }
            }

                // use numeric sort of % and lexicographic for everything else
                dataView.fastSort((sortcol == "percentComplete") ? percentCompleteValueFn : sortcol, args.sortAsc);
            } else {
                // using native sort with comparer
                // preferred method but can be very slow in IE with huge datasets
                dataView.sort(comparer, args.sortAsc);
                }
            })

            // wire up model events to drive the grid
            // !! both dataView.onRowCountChanged and dataView.onRowsChanged MUST be wired to correctly update the grid
            // see Issue#91
            dataView.onRowCountChanged.subscribe(function (e, args) {
                grid.updateRowCount()
                grid.render()
            })

            dataView.onRowsChanged.subscribe(function (e, args) {
                grid.invalidateRows(args.rows)
                grid.render()
            });

            dataView.onPagingInfoChanged.subscribe(function (e, pagingInfo) {
                grid.updatePagingStatusFromView( pagingInfo )
            })

            var h_runfilters = null;

            // wire up the slider to apply the filter to the model
            $("#pcSlider,#pcSlider2").slider({
                "range": "min",
                "slide": function (event, ui) {
                  Slick.GlobalEditorLock.cancelCurrentEdit();

                  if (percentCompleteThreshold != ui.value) {
                    window.clearTimeout(h_runfilters);
                    h_runfilters = window.setTimeout(updateFilter, 10);
                    percentCompleteThreshold = ui.value;
                  }
                }
            })


            // wire up the search textbox to apply the filter to the model
            $("#txtSearch,#txtSearch2").keyup(function (e) {
                Slick.GlobalEditorLock.cancelCurrentEdit()

                // clear on Esc
                if (e.which == 27) {
                  this.value = "";
                }

                searchString = this.value;
                updateFilter()
            })

            function updateFilter() {
                dataView.setFilterArgs({
                  searchString: searchString
                })
                dataView.refresh()
            }

            document.getElementById("reset2").addEventListener("click", function(){
                document.getElementById("txtSearch2").value = ""
                searchString = ""
                updateFilter()
            })

            $("#btnSelectRows").click(function () {
                if (!Slick.GlobalEditorLock.commitCurrentEdit()) {
                  return;
            }

            var rows = [];
                for (var i = 0; i < 10 && i < dataView.getLength(); i++) {
                  rows.push(i)
            }

            grid.setSelectedRows(rows)
            })


            // initialize the model after all the events have been hooked up
            dataView.beginUpdate()
            dataView.setItems(data)
            dataView.setFilterArgs({
                searchString: searchString
            })
            dataView.setFilter(myFilter)
            dataView.endUpdate()
            // for(let i = 0; i < data.length; i++){
            //     if(!rows[i].classList.contains("new-row"))
            //     rows[i].id = data[i]._id
            // }
            // if you don't want the items that are not visible (due to being filtered out
            // or being on a different page) to stay selected, pass 'false' to the second arg
            dataView.syncGridSelection(grid, true)

            $("#gridContainer").resizable();
        })

    </script>
    <% } else { -%>
        <script>
            var searchField = "member_code"
            function change_field(e){
                var elem = (typeof this.selectedIndex === "undefined" ? window.event.srcElement : this)
                var value = elem.value || elem.options[elem.selectedIndex].value
                return searchField = value
            }

            function reset(){
                document.getElementById("input_mem_code").value = ""
            }

            function isIEPreVer9() { var v = navigator.appVersion.match(/MSIE ([\d.]+)/i); return (v ? v[1] < 9 : false); }
            var grid
            var dataView
            var checkboxSelector1
            var columns = []

            columns.push({id: "id", name: "STT", field: "id", maxWidth: 80, cssClass: "cell-title", sortable: true})
            columns.push({id: "member_code", name: "Mã điểm bán", field: "member_code", minWidth: 120, cssClass: "cell-title", sortable: true})
            columns.push({id: "otp", name: "OTP", field: "otp", minWidth: 60, cssClass: "cell-title"})
            columns.push({id: "fb_name", name: "Tên facebook", field: "fb_name", minWidth: 120, cssClass: "cell-title", sortable: true})
            columns.push({id: "fb_gender", name: "Giới tính", field: "fb_gender", minWidth: 60, cssClass: "cell-title"})
            columns.push({id: "fb_linkChat", name: "Đường dẫn messenger", field: "fb_linkChat", minWidth: 160, cssClass: "cell-title", formatter: linkFormatter})
            columns.push({id: "auto_reply_string", name: "Trả lời tự động", field: "auto_reply_string", minWidth: 100, cssClass: "cell-title"})

            var options = {
                columnPicker: {
                    columnTitle: "Columns",
                    hideForceFitButton: false,
                    hideSyncResizeButton: false,
                    forceFitTitle: "Force fit columns",
                    syncResizeTitle: "Synchronous resize",
                },
                editable: true,
                enableAddRow: false,
                enableCellNavigation: true,
                enableTextSelectionOnCells: true,
                asyncEditorLoading: true,
                forceFitColumns: true,
                topPanelHeight: 25
            }

            function linkFormatter( row, cell, value, columnDef, dataContext ) {
                return '<a href="' + dataContext['fb_linkChat'] + '" target="_blank">' + value + '</a>';
            };

            var sortcol = "id"
            var sortdir = 1
            var percentCompleteThreshold = 0
            var searchString = ""

            function myFilter(item, args) {
                
                if (args.searchString != "" && item[`${searchField}`].indexOf(args.searchString) == -1) {
                    return false;
                } 
            
                return true;
            }

            function comparer(a, b) {
                var x = a[sortcol], y = b[sortcol];
                return (x == y ? 0 : (x > y ? 1 : -1));
            }

            function toggleFilterRow() {
                grid.setTopPanelVisibility(!grid.getOptions().showTopPanel);
            }

            function toggleAddingForm(){
                var form = document.getElementById("addingForm")
                if(form.style.display == 'flex'){
                    form.style.display = 'none'
                }else{
                    form.style.display = 'flex'
                }
            }

            $(".grid-header .ui-icon")
                .addClass("ui-state-default ui-corner-all")
                .mouseover(function (e) {
                $(e.target).addClass("ui-state-hover")
            })
                .mouseout(function (e) {
                $(e.target).removeClass("ui-state-hover")
            });

            axios.get('/manager/member/list')
            .then(function(response){
                var data = response.data
                for(let i = 0; i < data.length; i++ ){
                    data[i].id = i + 1
                    data[i].fb_id = data[i].fb_id
                    data[i].fb_name = data[i].fb_lastName + " " + data[i].fb_firstName
                    data[i].auto_reply_string = (data[i].auto_reply)?"Có":"Không"
                }
                dataView = new Slick.Data.DataView({ inlineFilters: true })
                grid = new Slick.Grid("#myGrid", dataView, columns, options)
                grid.setSelectionModel(new Slick.RowSelectionModel())

                var pager = new Slick.Controls.Pager(dataView, grid, $("#pager"));
                var columnpicker = new Slick.Controls.ColumnPicker(columns, grid, options);

                var row5 = document.getElementsByClassName("r5")
                for(let i of row5){
                    var a = document.createElement("a")
                    a.href = i.textContent
                    a.innerHTML = "Link"
                    i.append(a)
                }

                // move the filter panel defined in a hidden div into grid top panel
                $("#inlineFilterPanel")
                    .appendTo(grid.getTopPanel())
                    .show()

                grid.onCellChange.subscribe(function (e, args) {
                    dataView.updateItem(args.item.id, args.item)
                })

                grid.onKeyDown.subscribe(function (e) {
                    // select all rows on ctrl-a
                    if (e.which != 65 || !e.ctrlKey) {
                    return false;
                }

                var rows = []
                for (var i = 0; i < dataView.getLength(); i++) {
                  rows.push(i)
                }
                grid.setSelectedRows(rows);
                    e.preventDefault()
                })

                grid.onSort.subscribe(function (e, args) {
                sortdir = args.sortAsc ? 1 : -1;
                sortcol = args.sortCol.field

                if (isIEPreVer9()) {
                  // using temporary Object.prototype.toString override
                  // more limited and does lexicographic sort only by default, but can be much faster

                var percentCompleteValueFn = function () {
                    var val = this["percentComplete"];
                    if (val < 10) {
                      return "00" + val;
                    } else if (val < 100) {
                      return "0" + val;
                    } else {
                      return val;
                    }
                }

                    // use numeric sort of % and lexicographic for everything else
                    dataView.fastSort((sortcol == "percentComplete") ? percentCompleteValueFn : sortcol, args.sortAsc);
                } else {
                    // using native sort with comparer
                    // preferred method but can be very slow in IE with huge datasets
                    dataView.sort(comparer, args.sortAsc);
                    }
                })

                // wire up model events to drive the grid
                // !! both dataView.onRowCountChanged and dataView.onRowsChanged MUST be wired to correctly update the grid
                // see Issue#91
                dataView.onRowCountChanged.subscribe(function (e, args) {
                    grid.updateRowCount()
                    grid.render()
                })

                dataView.onRowsChanged.subscribe(function (e, args) {
                    grid.invalidateRows(args.rows)
                    grid.render()
                });

                dataView.onPagingInfoChanged.subscribe(function (e, pagingInfo) {
                    grid.updatePagingStatusFromView( pagingInfo )
                })

                var h_runfilters = null;

                // wire up the slider to apply the filter to the model
                $("#pcSlider,#pcSlider2").slider({
                    "range": "min",
                    "slide": function (event, ui) {
                      Slick.GlobalEditorLock.cancelCurrentEdit();

                      if (percentCompleteThreshold != ui.value) {
                        window.clearTimeout(h_runfilters);
                        h_runfilters = window.setTimeout(updateFilter, 10);
                        percentCompleteThreshold = ui.value;
                      }
                    }
                })


                // wire up the search textbox to apply the filter to the model
                $("#txtSearch,#txtSearch2").keyup(function (e) {
                    Slick.GlobalEditorLock.cancelCurrentEdit()

                    // clear on Esc
                    if (e.which == 27) {
                      this.value = "";
                    }

                    searchString = this.value;
                    updateFilter()
                })

                function updateFilter() {
                    dataView.setFilterArgs({
                      searchString: searchString
                    })
                    dataView.refresh()
                }

                document.getElementById("reset2").addEventListener("click", function(){
                    document.getElementById("txtSearch2").value = ""
                    searchString = ""
                    updateFilter()
                })

                $("#btnSelectRows").click(function () {
                    if (!Slick.GlobalEditorLock.commitCurrentEdit()) {
                      return;
                }

                var rows = [];
                    for (var i = 0; i < 10 && i < dataView.getLength(); i++) {
                      rows.push(i)
                }

                grid.setSelectedRows(rows)
                })


                // initialize the model after all the events have been hooked up
                dataView.beginUpdate()
                dataView.setItems(data)
                dataView.setFilterArgs({
                    searchString: searchString
                })
                dataView.setFilter(myFilter)
                dataView.endUpdate()
                // for(let i = 0; i < data.length; i++){
                //     if(!rows[i].classList.contains("new-row"))
                //     rows[i].id = data[i]._id
                // }
                // if you don't want the items that are not visible (due to being filtered out
                // or being on a different page) to stay selected, pass 'false' to the second arg
                dataView.syncGridSelection(grid, true)

                $("#gridContainer").resizable();
            })

        </script>
    <% } -%>
    <!-- END OF SELF ADDING SCRIPT -->
    <!-- BEGIN PAGE LEVEL PLUGINS -->
    <script src="/assets/global/scripts/datatable.js" type="text/javascript"></script>
    <script src="/assets/global/plugins/datatables/datatables.min.js" type="text/javascript"></script>
    <script src="/assets/global/plugins/datatables/plugins/bootstrap/datatables.bootstrap.js" type="text/javascript"></script>
    <!-- END PAGE LEVEL PLUGINS -->
    <!-- BEGIN PAGE LEVEL SCRIPTS -->
    <script src="/assets/pages/scripts/table-datatables-managed.js" type="text/javascript"></script>
    <!-- END PAGE LEVEL SCRIPTS -->
<% include _layouts/footer %>